# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StarterViewer
else:
    import _StarterViewer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StarterViewer.delete_SwigPyIterator

    def value(self):
        return _StarterViewer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StarterViewer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StarterViewer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StarterViewer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StarterViewer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StarterViewer.SwigPyIterator_copy(self)

    def next(self):
        return _StarterViewer.SwigPyIterator_next(self)

    def __next__(self):
        return _StarterViewer.SwigPyIterator___next__(self)

    def previous(self):
        return _StarterViewer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StarterViewer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StarterViewer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StarterViewer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StarterViewer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StarterViewer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StarterViewer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StarterViewer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StarterViewer:
_StarterViewer.SwigPyIterator_swigregister(SwigPyIterator)

class StringArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StarterViewer.StringArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StarterViewer.StringArray___nonzero__(self)

    def __bool__(self):
        return _StarterViewer.StringArray___bool__(self)

    def __len__(self):
        return _StarterViewer.StringArray___len__(self)

    def __getslice__(self, i, j):
        return _StarterViewer.StringArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StarterViewer.StringArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StarterViewer.StringArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StarterViewer.StringArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StarterViewer.StringArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StarterViewer.StringArray___setitem__(self, *args)

    def pop(self):
        return _StarterViewer.StringArray_pop(self)

    def append(self, x):
        return _StarterViewer.StringArray_append(self, x)

    def empty(self):
        return _StarterViewer.StringArray_empty(self)

    def size(self):
        return _StarterViewer.StringArray_size(self)

    def swap(self, v):
        return _StarterViewer.StringArray_swap(self, v)

    def begin(self):
        return _StarterViewer.StringArray_begin(self)

    def end(self):
        return _StarterViewer.StringArray_end(self)

    def rbegin(self):
        return _StarterViewer.StringArray_rbegin(self)

    def rend(self):
        return _StarterViewer.StringArray_rend(self)

    def clear(self):
        return _StarterViewer.StringArray_clear(self)

    def get_allocator(self):
        return _StarterViewer.StringArray_get_allocator(self)

    def pop_back(self):
        return _StarterViewer.StringArray_pop_back(self)

    def erase(self, *args):
        return _StarterViewer.StringArray_erase(self, *args)

    def __init__(self, *args):
        _StarterViewer.StringArray_swiginit(self, _StarterViewer.new_StringArray(*args))

    def push_back(self, x):
        return _StarterViewer.StringArray_push_back(self, x)

    def front(self):
        return _StarterViewer.StringArray_front(self)

    def back(self):
        return _StarterViewer.StringArray_back(self)

    def assign(self, n, x):
        return _StarterViewer.StringArray_assign(self, n, x)

    def resize(self, *args):
        return _StarterViewer.StringArray_resize(self, *args)

    def insert(self, *args):
        return _StarterViewer.StringArray_insert(self, *args)

    def reserve(self, n):
        return _StarterViewer.StringArray_reserve(self, n)

    def capacity(self):
        return _StarterViewer.StringArray_capacity(self)
    __swig_destroy__ = _StarterViewer.delete_StringArray

# Register StringArray in _StarterViewer:
_StarterViewer.StringArray_swigregister(StringArray)

class StarterViewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _StarterViewer.StarterViewer_Instance()
    __swig_destroy__ = _StarterViewer.delete_StarterViewer

    def Init(self, args):
        return _StarterViewer.StarterViewer_Init(self, args)

    def MainLoop(self):
        return _StarterViewer.StarterViewer_MainLoop(self)

    def SetWidth(self, w):
        return _StarterViewer.StarterViewer_SetWidth(self, w)

    def SetHeight(self, h):
        return _StarterViewer.StarterViewer_SetHeight(self, h)

    def GetWidth(self):
        return _StarterViewer.StarterViewer_GetWidth(self)

    def GetHeight(self):
        return _StarterViewer.StarterViewer_GetHeight(self)

    def SetTitle(self, *args):
        return _StarterViewer.StarterViewer_SetTitle(self, *args)

    def GetTitle(self):
        return _StarterViewer.StarterViewer_GetTitle(self)

    def SetImage(self, img):
        return _StarterViewer.StarterViewer_SetImage(self, img)

    def Display(self):
        return _StarterViewer.StarterViewer_Display(self)

    def Keyboard(self, key, x, y):
        return _StarterViewer.StarterViewer_Keyboard(self, key, x, y)

    def Mouse(self, button, state, x, y):
        return _StarterViewer.StarterViewer_Mouse(self, button, state, x, y)

    def Motion(self, x, y):
        return _StarterViewer.StarterViewer_Motion(self, x, y)

    def Special(self, key, x, y):
        return _StarterViewer.StarterViewer_Special(self, key, x, y)

    def Idle(self):
        return _StarterViewer.StarterViewer_Idle(self)

    def Reshape(self, w, h):
        return _StarterViewer.StarterViewer_Reshape(self, w, h)

    def Reset(self):
        return _StarterViewer.StarterViewer_Reset(self)

    def Home(self):
        return _StarterViewer.StarterViewer_Home(self)

    def Usage(self):
        return _StarterViewer.StarterViewer_Usage(self)

# Register StarterViewer in _StarterViewer:
_StarterViewer.StarterViewer_swigregister(StarterViewer)

def StarterViewer_Instance():
    return _StarterViewer.StarterViewer_Instance()


def CreateViewer():
    return _StarterViewer.CreateViewer()


